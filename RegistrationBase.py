import random
import string
import os
from cryptography.fernet import Fernet

KEY_FILE = 'key.key'
ENC_FILE = 'accounts.encrypted'
DOMAINS = ['gmail.com', 'yandex.ru', 'mail.ru', 'outlook.com', 'icloud.com']

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ ---
def load_key():
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, 'wb') as f:
            f.write(key)
    else:
        with open(KEY_FILE, 'rb') as f:
            key = f.read()
    return key

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –∏ –ø–∞—Ä–æ–ª—è ---
def generate_email():
    name = ''.join(random.choices(string.ascii_lowercase, k=6))
    num = ''.join(random.choices(string.digits, k=3))
    domain = random.choice(DOMAINS)
    return f"{name}{num}@{domain}"

def generate_password(length=12):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))

# --- –†–∞–±–æ—Ç–∞ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º ---
def decrypt_file(fernet):
    if not os.path.exists(ENC_FILE):
        return ""
    with open(ENC_FILE, 'rb') as f:
        return fernet.decrypt(f.read()).decode()

def encrypt_and_save(content, fernet):
    with open(ENC_FILE, 'wb') as f:
        f.write(fernet.encrypt(content.encode()))

# --- –†–∞–∑–±–æ—Ä –∑–∞–ø–∏—Å–µ–π ---
def parse_entries(data):
    entries = data.strip().split('\n\n')
    return [e.strip() for e in entries if e.strip()]

# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø–∏—Å–∏ ---
def format_entry(comment, email, password):
    return f"{comment}:\n  Email: {email}\n  Pass:  {password}"

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ ---
def save_entry(comment, email, password, fernet):
    data = decrypt_file(fernet)
    entries = parse_entries(data)
    entries.append(format_entry(comment, email, password))
    encrypt_and_save('\n\n'.join(entries), fernet)
    print("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ ---
def view_all(fernet):
    data = decrypt_file(fernet)
    entries = parse_entries(data)
    if not entries:
        print("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    print("\nüìÇ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n")
    for idx, entry in enumerate(entries, 1):
        print(f"[{idx}] {entry}\n")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
def delete_entry(fernet):
    data = decrypt_file(fernet)
    entries = parse_entries(data)
    view_all(fernet)
    num = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")) - 1
    if 0 <= num < len(entries):
        removed = entries.pop(num)
        encrypt_and_save('\n\n'.join(entries), fernet)
        print("üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞:\n", removed)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
def edit_entry(fernet):
    data = decrypt_file(fernet)
    entries = parse_entries(data)
    view_all(fernet)
    num = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")) - 1
    if 0 <= num < len(entries):
        print("–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –µ–≥–æ.")
        lines = entries[num].splitlines()
        old_comment = lines[0].replace(":", "").strip()
        old_email = lines[1].replace("Email:", "").strip()
        old_pass = lines[2].replace("Pass:", "").strip()

        comment = input(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π [{old_comment}]: ") or old_comment
        email = input(f"Email [{old_email}]: ") or old_email
        password = input(f"–ü–∞—Ä–æ–ª—å [{old_pass}]: ") or old_pass

        entries[num] = format_entry(comment, email, password)
        encrypt_and_save('\n\n'.join(entries), fernet)
        print("‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

# === üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ===
def export_to_txt(fernet, export_file='exported_accounts.txt'):
    data = decrypt_file(fernet)
    entries = parse_entries(data)
    if not entries:
        print("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    with open(export_file, 'w', encoding='utf-8') as f:
        for entry in entries:
            f.write(entry + "\n\n")
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {export_file}")

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---
def main():
    key = load_key()
    fernet = Fernet(key)

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å email+–ø–∞—Ä–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        print("2 ‚Äî –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é email+–ø–∞—Ä–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        print("3 ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
        print("4 ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
        print("5 ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")
        print("6 ‚Äî üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ .txt —Ñ–∞–π–ª")
        print("0 ‚Äî –í—ã—Ö–æ–¥")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == '1':
            email = generate_email()
            password = generate_password()
            print(f"üìß Email: {email}")
            print(f"üîê –ü–∞—Ä–æ–ª—å: {password}")
            comment = input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏: ")
            save_entry(comment, email, password, fernet)

        elif choice == '2':
            email = input("–í–≤–µ–¥–∏—Ç–µ email: ")
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            comment = input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ")
            save_entry(comment, email, password, fernet)

        elif choice == '3':
            view_all(fernet)

        elif choice == '4':
            delete_entry(fernet)

        elif choice == '5':
            edit_entry(fernet)

        elif choice == '6':
            export_to_txt(fernet)

        elif choice == '0':
            print("–í—ã—Ö–æ–¥.")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

if __name__ == "__main__":
    main()